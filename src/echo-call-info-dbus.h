/*
 * Generated by gdbus-codegen 2.33.8. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __ECHO_CALL_INFO_DBUS_H__
#define __ECHO_CALL_INFO_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Telepathy.Phoenix.CallInfo */

#define ECI_TYPE_CALL_INFO (eci_call_info_get_type ())
#define ECI_CALL_INFO(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_CALL_INFO, EciCallInfo))
#define ECI_IS_CALL_INFO(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_CALL_INFO))
#define ECI_CALL_INFO_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ECI_TYPE_CALL_INFO, EciCallInfoIface))

struct _EciCallInfo;
typedef struct _EciCallInfo EciCallInfo;
typedef struct _EciCallInfoIface EciCallInfoIface;

struct _EciCallInfoIface
{
  GTypeInterface parent_iface;

  const gchar * (*get_channel) (EciCallInfo *object);

  gboolean  (*get_receiving_audio) (EciCallInfo *object);

  gboolean  (*get_receiving_video) (EciCallInfo *object);

};

GType eci_call_info_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *eci_call_info_interface_info (void);
guint eci_call_info_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus property accessors: */
const gchar *eci_call_info_get_channel (EciCallInfo *object);
gchar *eci_call_info_dup_channel (EciCallInfo *object);
void eci_call_info_set_channel (EciCallInfo *object, const gchar *value);

gboolean eci_call_info_get_receiving_video (EciCallInfo *object);
void eci_call_info_set_receiving_video (EciCallInfo *object, gboolean value);

gboolean eci_call_info_get_receiving_audio (EciCallInfo *object);
void eci_call_info_set_receiving_audio (EciCallInfo *object, gboolean value);


/* ---- */

#define ECI_TYPE_CALL_INFO_PROXY (eci_call_info_proxy_get_type ())
#define ECI_CALL_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_CALL_INFO_PROXY, EciCallInfoProxy))
#define ECI_CALL_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ECI_TYPE_CALL_INFO_PROXY, EciCallInfoProxyClass))
#define ECI_CALL_INFO_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ECI_TYPE_CALL_INFO_PROXY, EciCallInfoProxyClass))
#define ECI_IS_CALL_INFO_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_CALL_INFO_PROXY))
#define ECI_IS_CALL_INFO_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ECI_TYPE_CALL_INFO_PROXY))

typedef struct _EciCallInfoProxy EciCallInfoProxy;
typedef struct _EciCallInfoProxyClass EciCallInfoProxyClass;
typedef struct _EciCallInfoProxyPrivate EciCallInfoProxyPrivate;

struct _EciCallInfoProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EciCallInfoProxyPrivate *priv;
};

struct _EciCallInfoProxyClass
{
  GDBusProxyClass parent_class;
};

GType eci_call_info_proxy_get_type (void) G_GNUC_CONST;

void eci_call_info_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EciCallInfo *eci_call_info_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EciCallInfo *eci_call_info_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void eci_call_info_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EciCallInfo *eci_call_info_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EciCallInfo *eci_call_info_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define ECI_TYPE_CALL_INFO_SKELETON (eci_call_info_skeleton_get_type ())
#define ECI_CALL_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_CALL_INFO_SKELETON, EciCallInfoSkeleton))
#define ECI_CALL_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ECI_TYPE_CALL_INFO_SKELETON, EciCallInfoSkeletonClass))
#define ECI_CALL_INFO_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ECI_TYPE_CALL_INFO_SKELETON, EciCallInfoSkeletonClass))
#define ECI_IS_CALL_INFO_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_CALL_INFO_SKELETON))
#define ECI_IS_CALL_INFO_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ECI_TYPE_CALL_INFO_SKELETON))

typedef struct _EciCallInfoSkeleton EciCallInfoSkeleton;
typedef struct _EciCallInfoSkeletonClass EciCallInfoSkeletonClass;
typedef struct _EciCallInfoSkeletonPrivate EciCallInfoSkeletonPrivate;

struct _EciCallInfoSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EciCallInfoSkeletonPrivate *priv;
};

struct _EciCallInfoSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType eci_call_info_skeleton_get_type (void) G_GNUC_CONST;

EciCallInfo *eci_call_info_skeleton_new (void);


/* ---- */

#define ECI_TYPE_OBJECT (eci_object_get_type ())
#define ECI_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_OBJECT, EciObject))
#define ECI_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_OBJECT))
#define ECI_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), ECI_TYPE_OBJECT, EciObject))

struct _EciObject;
typedef struct _EciObject EciObject;
typedef struct _EciObjectIface EciObjectIface;

struct _EciObjectIface
{
  GTypeInterface parent_iface;
};

GType eci_object_get_type (void) G_GNUC_CONST;

EciCallInfo *eci_object_get_call_info (EciObject *object);
EciCallInfo *eci_object_peek_call_info (EciObject *object);

#define ECI_TYPE_OBJECT_PROXY (eci_object_proxy_get_type ())
#define ECI_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_OBJECT_PROXY, EciObjectProxy))
#define ECI_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ECI_TYPE_OBJECT_PROXY, EciObjectProxyClass))
#define ECI_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ECI_TYPE_OBJECT_PROXY, EciObjectProxyClass))
#define ECI_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_OBJECT_PROXY))
#define ECI_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ECI_TYPE_OBJECT_PROXY))

typedef struct _EciObjectProxy EciObjectProxy;
typedef struct _EciObjectProxyClass EciObjectProxyClass;
typedef struct _EciObjectProxyPrivate EciObjectProxyPrivate;

struct _EciObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  EciObjectProxyPrivate *priv;
};

struct _EciObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType eci_object_proxy_get_type (void) G_GNUC_CONST;
EciObjectProxy *eci_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define ECI_TYPE_OBJECT_SKELETON (eci_object_skeleton_get_type ())
#define ECI_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_OBJECT_SKELETON, EciObjectSkeleton))
#define ECI_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ECI_TYPE_OBJECT_SKELETON, EciObjectSkeletonClass))
#define ECI_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ECI_TYPE_OBJECT_SKELETON, EciObjectSkeletonClass))
#define ECI_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_OBJECT_SKELETON))
#define ECI_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ECI_TYPE_OBJECT_SKELETON))

typedef struct _EciObjectSkeleton EciObjectSkeleton;
typedef struct _EciObjectSkeletonClass EciObjectSkeletonClass;
typedef struct _EciObjectSkeletonPrivate EciObjectSkeletonPrivate;

struct _EciObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  EciObjectSkeletonPrivate *priv;
};

struct _EciObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType eci_object_skeleton_get_type (void) G_GNUC_CONST;
EciObjectSkeleton *eci_object_skeleton_new (const gchar *object_path);
void eci_object_skeleton_set_call_info (EciObjectSkeleton *object, EciCallInfo *interface_);

/* ---- */

#define ECI_TYPE_OBJECT_MANAGER_CLIENT (eci_object_manager_client_get_type ())
#define ECI_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), ECI_TYPE_OBJECT_MANAGER_CLIENT, EciObjectManagerClient))
#define ECI_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), ECI_TYPE_OBJECT_MANAGER_CLIENT, EciObjectManagerClientClass))
#define ECI_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), ECI_TYPE_OBJECT_MANAGER_CLIENT, EciObjectManagerClientClass))
#define ECI_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), ECI_TYPE_OBJECT_MANAGER_CLIENT))
#define ECI_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), ECI_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _EciObjectManagerClient EciObjectManagerClient;
typedef struct _EciObjectManagerClientClass EciObjectManagerClientClass;
typedef struct _EciObjectManagerClientPrivate EciObjectManagerClientPrivate;

struct _EciObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  EciObjectManagerClientPrivate *priv;
};

struct _EciObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType eci_object_manager_client_get_type (void) G_GNUC_CONST;

GType eci_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void eci_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *eci_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *eci_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void eci_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *eci_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *eci_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __ECHO_CALL_INFO_DBUS_H__ */
